# -*- coding: utf-8 -*-
"""Genetic_181014100.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uuho68M4SqrssRod0sbQB59KpqxEzY1v
"""

import random
#generating random chromosomes
def r_chromo(size): 
    return [ random.randint(1, dim) for _ in range(dim) ]

#fitness_calculation
def fitness(chromo):
    h_coll = sum([chromo.count(queen)-1 for queen in chromo])/2
    d_coll = 0
    n = len(chromo)
    left_dig = [0] * 2*n
    right_dig = [0] * 2*n
    for i in range(n):
        left_dig[i + chromo[i] - 1] += 1
        right_dig[len(chromo) - i + chromo[i] - 2] += 1
    d_coll = 0
    for i in range(2*n-1):
        counter = 0
        if left_dig[i] > 1:
            counter += left_dig[i]-1
        if right_dig[i] > 1:
            counter += right_dig[i]-1
        d_coll += counter / (n-abs(i-n+1))
    
    return int(maxF - (h_coll + d_coll))

def prob(chromo, fitness):
    return fitness(chromo) / maxF
def rPick(population, probabilities):
    proba_ppl = zip(population, probabilities)
    total = sum(w for c, w in proba_ppl)
    r = random.uniform(0, total)
    u = 0
    for c, w in zip(population, probabilities):
        if u + w >= r:
            return c
        u += w
    assert False, "Stop"
        
#cross over between two chromosomes
def crossover(x, y):
    n = len(x)
    c = random.randint(0, n - 1)
    return x[0:c] + y[c:n]

#doing mutation by randomly changing the value of a random index of a chromosome
def mutation(x):  
    n = len(x)
    c = random.randint(0, n - 1)
    m = random.randint(1, n)
    x[c] = m
    return x
def genetic(population, fitness):
    mutation_prob = 0.03
    new_population = []
    probabilities = [prob(n, fitness) for n in population]
    for i in range(len(population)):
        #first best chromosome
        x = rPick(population, probabilities) 
        #second best chromosome
        y = rPick(population, probabilities)
        
        #new chromosome from these two
        child = crossover(x, y) 
        if random.random() < mutation_prob:
            child = mutation(child)
        #chromosome(child)
        new_population.append(child)
        if fitness(child) == maxF: break
    return new_population
def print_chromo(chrom):
    print(" ")
#6*6 chess board
#maximum fitness is 6*5/2=15
if __name__ == "__main__":
    dim = 6
    maxF = 15
    population = [r_chromo(dim) for _ in range(50)]
    generation = 1

    while not maxF in [fitness(chrom) for chrom in population]:
        print("Generation No: {}".format(generation))
        population = genetic(population, fitness)
        print("Maximum Fitness in this generation is {}".format(max([fitness(n) for n in population])))
        generation += 1
    chrom_out = []
    print("")
    print("Found best fitness in generation: {}".format(generation-1))
    for chrom in population:
        if fitness(chrom) == maxF:
            print("");
            print("Possible solved chess board: ")
            chrom_out = chrom
            print_chromo(chrom)            
    matrixOut = []
    for x in range(dim):
        matrixOut.append(["x"] * dim)        
    for i in range(dim):
        matrixOut[dim-chrom_out[i]][i]="Q"           
    def print_matrixOut(matrixOut):
        for row in matrixOut:
            print (" ".join(row))           
    print()
    print_matrixOut(matrixOut)